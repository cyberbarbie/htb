import org.apache.commons.codec.binary.Base64;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Main {
    private static final String FILE_PATH = "/usr/share/wordlists/rockyou.txt";
    private static final String TARGET_HASH = "$SHA$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2I";
    private static final String HASH_ALGORITHM = "SHA";
    private static final String SALT = "d";

    public static void main(String[] args) {
        try {
            String foundPassword = findMatchingPassword(FILE_PATH, TARGET_HASH);
            if (foundPassword != null) {
                System.out.println("[+] Password: " + foundPassword);
            } else {
                System.out.println("[-] No matching password found.");
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    private static String findMatchingPassword(String filePath, String targetHash) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String hash = hashPassword(line);
                if (hash.equals(targetHash)) {
                    return line;
                }
            }
        }
        return null;
    }

    private static String hashPassword(String password) {
        byte[] bytes = password.getBytes(StandardCharsets.UTF_8);
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(HASH_ALGORITHM);
            messageDigest.update(SALT.getBytes(StandardCharsets.UTF_8));
            messageDigest.update(bytes);
            return "$" + HASH_ALGORITHM + "$" + SALT + "$" + Base64.encodeBase64URLSafeString(messageDigest.digest()).replace('+', '.');
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error hashing password", e);
        }
    }
}
